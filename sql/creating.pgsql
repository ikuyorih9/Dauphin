DROP TABLE IF EXISTS Nivel;
CREATE TABLE Nivel(
    classificacao VARCHAR(255),
    minimo_pontos INTEGER NOT NULL,
    descricao VARCHAR(1024) NOT NULL,
    CONSTRAINT PK_NIVEL PRIMARY KEY (classificacao)
);

DROP TABLE IF EXISTS Usuario;
CREATE TABLE Usuario(
    username VARCHAR(255),
    email VARCHAR(255) NOT NULL,
    nome VARCHAR(255) NOT NULL,
    senha VARCHAR(255) NOT NULL,
    role VARCHAR(32) NOT NULL,
    sexo CHAR,
    data_nascimento DATE,
    data_cadastro DATE,
    foto VARCHAR(255),
    pontuacao INTEGER,
    nivel VARCHAR(255),
    CONSTRAINT PK_USUARIO PRIMARY KEY (username),
    CONSTRAINT SK_USUARIO UNIQUE(email),
    CONSTRAINT FK_USUARIO FOREIGN KEY (nivel) REFERENCES Nivel(classificacao) ON DELETE CASCADE,
    CONSTRAINT CK_ROLE CHECK( role IN ('ADMIN', 'USER')),
    CONSTRAINT CK_SEXO CHECK (sexo = 'M' OR sexo = 'F')
);

DROP TABLE IF EXISTS Tem_Amizade;
CREATE TABLE Tem_Amizade(
    usuario1 VARCHAR(255),
    usuario2 VARCHAR(255),
    data_inicio DATE NOT NULL,
    CONSTRAINT PK_AMIZADE PRIMARY KEY(usuario1, usuario2),
    CONSTRAINT FK_USUARIO1 FOREIGN KEY (usuario1) REFERENCES Usuario(username) ON DELETE CASCADE,
    CONSTRAINT FK_USUARIO2 FOREIGN KEY (usuario2) REFERENCES Usuario(username) ON DELETE CASCADE
);

DROP INDEX IF EXISTS unique_friendship_idx;
CREATE UNIQUE INDEX unique_friendship_idx
ON tem_amizade (LEAST(usuario1, usuario2), GREATEST(usuario1, usuario2));

DROP FUNCTION set_default_publico_privado();
CREATE OR REPLACE FUNCTION set_default_publico_privado()
RETURNS trigger AS $$
BEGIN
  IF NEW.visibilidade IS NULL THEN
    NEW.visibilidade := 'PUBLICO';
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER trg_set_default_publico_privado ON Grupo;
CREATE TRIGGER trg_set_default_publico_privado
BEFORE INSERT ON Grupo
FOR EACH ROW
EXECUTE FUNCTION set_default_publico_privado();

DROP TABLE IF EXISTS Grupo;
CREATE TABLE Grupo (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY,
    host VARCHAR(255) NOT NULL,
    data_criacao DATE NOT NULL,
    nome VARCHAR(512) NOT NULL,
    visibilidade VARCHAR(16) NOT NULL DEFAULT 'PRIVADO',
    qtd_maxima INTEGER DEFAULT 20,
    CONSTRAINT PK_GRUPO PRIMARY KEY (id),
    CONSTRAINT CK_PUBLICO CHECK (visibilidade in ('PUBLICO', 'PRIVADO')),
    CONSTRAINT FK_HOST FOREIGN KEY (host) REFERENCES Usuario(username) ON DELETE CASCADE
);

DROP TABLE IF EXISTS ROLE_GRUPO;
CREATE TABLE ROLE_GRUPO(
    nome VARCHAR(255),
    descricao VARCHAR(1024),
    pode_convidar BOOLEAN DEFAULT FALSE,
    pode_remover BOOLEAN DEFAULT FALSE,
    pode_editar BOOLEAN DEFAULT FALSE,
    pode_apagar BOOLEAN DEFAULT FALSE,
    CONSTRAINT PK_ROLE_GRUPO PRIMARY KEY (nome),
    CONSTRAINT CK_ROKE_GRUPO CHECK(nome IN ('ADMIN', 'HOST', 'MEMBER'))
);

DROP TABLE IF EXISTS PARTICIPA_GRUPO;
CREATE TABLE PARTICIPA_GRUPO(
    usuario VARCHAR(255),
    grupo INTEGER,
    data_entrada DATE NOT NULL,
    role VARCHAR(255) NOT NULL,
    CONSTRAINT PK_PARTICIPA_GRUPO PRIMARY KEY (usuario, grupo),
    CONSTRAINT FK1_PARTICIPA_GRUPO FOREIGN KEY (usuario) REFERENCES USUARIO(username) ON DELETE CASCADE,
    CONSTRAINT FK2_PARTICIPA_GRUPO FOREIGN KEY (grupo) REFERENCES GRUPO(id) ON DELETE CASCADE,
    CONSTRAINT FK3_PARTICIPA_GRUPO FOREIGN KEY (role) REFERENCES ROLE_GRUPO(nome) ON DELETE CASCADE
);

DROP TABLE IF EXISTS META_CONJUNTA;
CREATE TABLE META_CONJUNTA(
    grupo INTEGER,
    tipo VARCHAR(255),
    valor FLOAT NOT NULL,
    data_inicio DATE NOT NULL,
    data_fim DATE,
    CONSTRAINT PK_META_CONJUNTA PRIMARY KEY (grupo, tipo),
    CONSTRAINT FK_META_CONJUNTA FOREIGN KEY (grupo) REFERENCES GRUPO(id) ON DELETE CASCADE
);

DROP TABLE IF EXISTS META_PESSOAL;
CREATE TABLE META_PESSOAL(
    grupo INTEGER,
    tipo VARCHAR(255),
    valor FLOAT NOT NULL,
    data_inicio DATE NOT NULL,
    data_fim DATE,
    CONSTRAINT PK_META_PESSOAL PRIMARY KEY (grupo, tipo),
    CONSTRAINT FK_META_PESSOAL FOREIGN KEY (grupo) REFERENCES GRUPO(id) ON DELETE CASCADE
);
